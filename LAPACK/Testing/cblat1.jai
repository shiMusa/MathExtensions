// ? LAPACK cblat1
// ? http://www.netlib.org/lapack/explore-html/d0/d78/cblat1_8f_source.html

//  ######  ########  ##          ###    ########    ##
// ##    ## ##     ## ##         ## ##      ##     ####
// ##       ##     ## ##        ##   ##     ##       ##
// ##       ########  ##       ##     ##    ##       ##
// ##       ##     ## ##       #########    ##       ##
// ##    ## ##     ## ##       ##     ##    ##       ##
//  ######  ########  ######## ##     ##    ##     ######



#scope_file
// Common blocks
icase, n, incx, incy : int = ---;
#scope_export


cblat1 :: () -> bool {
    println_push("cblat1");

    sfac: float32 : 9.765625e-4;
    pass : bool = ---;
    for ic:1..10 {
        icase = ic;

        if icase <= 5 {
            pass &= check2(sfac);
        } else if icase >= 6 {
            pass &= check1(sfac);
        }
    }
    return pass;
}


//  ######  ######## ########  ######  ########
// ##    ##    ##    ##       ##    ##    ##
// ##          ##    ##       ##          ##
//  ######     ##    ######    ######     ##
//       ##    ##    ##             ##    ##
// ##    ##    ##    ##       ##    ##    ##
//  ######     ##    ########  ######     ##

stest :: (len: int, scomp: []$T, strue: []T, ssize: []T, sfac: T) -> bool #modify {
    if !is_intrinsic_float_number(T) {T = null; return;}    
} {
    println_push("stest");
    check := true;
    for i:0..len-1 {
        if !stest1(scomp[i], strue[i], ssize[i], sfac, push_msg=false) {
            err("i/len: %/% failed", i, len);
            check = false;
        }
    }
    return check;
}

//  ######  ######## ########  ######  ########    ##
// ##    ##    ##    ##       ##    ##    ##     ####
// ##          ##    ##       ##          ##       ##
//  ######     ##    ######    ######     ##       ##
//       ##    ##    ##             ##    ##       ##
// ##    ##    ##    ##       ##    ##    ##       ##
//  ######     ##    ########  ######     ##     ######

stest1 :: (scomp: $T, strue: T, ssize: T, sfac: T, $push_msg: bool=true) -> bool #modify {
    if !is_intrinsic_float_number(T) {T = null; return;}    
} {
    #if T == float32 {
        eps :: EPS_32;
    } else {
        eps :: EPS_64;
    }

    #if push_msg println_push("stest1");

    if abs((scomp - strue)*sfac > abs(ssize)*eps {
        err("scomp: %, strue: %, ssize: %, sfac: %", scomp, strue, ssize, sfac);
        return false;
    }
    return true;
}

//  ######  ######## ########  ######  ########
// ##    ##    ##    ##       ##    ##    ##
// ##          ##    ##       ##          ##
// ##          ##    ######    ######     ##
// ##          ##    ##             ##    ##
// ##    ##    ##    ##       ##    ##    ##
//  ######     ##    ########  ######     ##

ctest :: (len: int, ccomp: $T, ctrue: T, csize: T, sfac: U) -> bool {
    #run assert(U == get_number_inner_type(T));

    println_push("ctest");

    scomp := NewArray(len*4, U, false);
    defer array_free(scomp);
    strue := NewArray(len*4, U, false);
    defer array_free(strue);
    ssize := NewArray(len*4, U, false);
    defer array_free(ssize);

    for 0..len-1 {
        scomp[it  ] = real(ccomp[i]);
        scomp[it+1] = imag(ccomp[i]);
        scomp[it+2] = quat_j(ccomp[i]);
        scomp[it+3] = quat_k(ccomp[i]);

        strue[it  ] = real(ctrue[i]);
        strue[it+1] = imag(ctrue[i]);
        strue[it+2] = quat_j(ctrue[i]);
        strue[it+3] = quat_k(ctrue[i]);

        ssize[it  ] = real(csize[i]);
        ssize[it+1] = imag(csize[i]);
        ssize[it+2] = quat_j(csize[i]);
        ssize[it+3] = quat_k(csize[i]);
    }

    return stest(4*len, scomp, strue, ssize, sfac);
}

// #### ######## ########  ######  ########
//  ##     ##    ##       ##    ##    ##
//  ##     ##    ##       ##          ##
//  ##     ##    ######    ######     ##
//  ##     ##    ##             ##    ##
//  ##     ##    ##       ##    ##    ##
// ####    ##    ########  ######     ##

itest :: (icomp: int, itrue: int, $push_msg: bool=true) -> bool {
    println_push("itest");

    if icomp != itrue {
        err("icomp: %, itrue: %", icomp, itrue);
        return false;
    }
    return true;
}

//  ######  ##     ## ########  ######  ##    ##    ##
// ##    ## ##     ## ##       ##    ## ##   ##   ####
// ##       ##     ## ##       ##       ##  ##      ##
// ##       ######### ######   ##       #####       ##
// ##       ##     ## ##       ##       ##  ##      ##
// ##    ## ##     ## ##       ##    ## ##   ##     ##
//  ######  ##     ## ########  ######  ##    ##  ######

check1 :: (sfac: $T) -> bool #modify {
    if !is_intrinsic_float_number(T) {T = null; return;}
} {
    sa : float32 : 0.3;
    ca : C32 : C32.{0.4, -0.7};
    cv : [2][5][8]C32 : C32.[ // ! reversed
        C32.[
            C32.[
                C32.{0.1, 0.1},
                C32.{1.0, 2.0},
                C32.{1.0, 2.0},
                C32.{1.0, 2.0},
                C32.{1.0, 2.0},
                C32.{1.0, 2.0},
                C32.{1.0, 2.0},
                C32.{1.0, 2.0}
            ],
            C32.[
                C32.{ 0.3, -0.4},
                C32.{ 3.0,  4.0},
                C32.{ 3.0,  4.0},
                C32.{ 3.0,  4.0},
                C32.{ 3.0,  4.0},
                C32.{ 3.0,  4.0},
                C32.{ 3.0,  4.0},
                C32.{ 3.0,  4.0}
            ],
            C32.[
                C32.{ 0.1, -0.3},
                C32.{ 0.5, -0.1},
                C32.{ 5.0,  6.0},
                C32.{ 5.0,  6.0},
                C32.{ 5.0,  6.0},
                C32.{ 5.0,  6.0},
                C32.{ 5.0,  6.0},
                C32.{ 5.0,  6.0}
            ],
            C32.[
                C32.{ 0.1,  0.1},
                C32.{-0.6,  0.1},
                C32.{ 0.1, -0.3},
                C32.{ 7.0,  8.0},
                C32.{ 7.0,  8.0},
                C32.{ 7.0,  8.0},
                C32.{ 7.0,  8.0},
                C32.{ 7.0,  8.0}
            ],
            C32.[
                C32.{ 0.3,  0.1},
                C32.{ 0.5,  0.0},
                C32.{ 0.0,  0.5},
                C32.{ 0.0,  0.2},
                C32.{ 2.0,  3.0},
                C32.{ 2.0,  3.0},
                C32.{ 2.0,  3.0},
                C32.{ 2.0,  3.0}
            ]
        ],
        C32.[
            C32.[
                C32.{ 0.1,  0.1},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0}
            ],
            C32.[
                C32.{ 0.3, -0.4},
                C32.{ 6.0,  7.0},
                C32.{ 6.0,  7.0},
                C32.{ 6.0,  7.0},
                C32.{ 6.0,  7.0},
                C32.{ 6.0,  7.0},
                C32.{ 6.0,  7.0},
                C32.{ 6.0,  7.0}
            ],
            C32.[
                C32.{ 0.1, -0.3},
                C32.{ 8.0,  9.0},
                C32.{ 0.5, -0.1},
                C32.{ 2.0,  5.0},
                C32.{ 2.0,  5.0},
                C32.{ 2.0,  5.0},
                C32.{ 2.0,  5.0},
                C32.{ 2.0,  5.0}
            ],
            C32.[
                C32.{ 0.1,  0.1},
                C32.{ 3.0,  6.0},
                C32.{-0.6,  0.1},
                C32.{ 4.0,  7.0},
                C32.{ 0.1, -0.3},
                C32.{ 7.0,  2.0},
                C32.{ 7.0,  2.0},
                C32.{ 7.0,  2.0}
            ],
            C32.[
                C32.{ 0.3,  0.1},
                C32.{ 5.0,  8.0},
                C32.{ 0.5,  0.0},
                C32.{ 6.0,  9.0},
                C32.{ 0.0,  0.5},
                C32.{ 8.0,  3.0},
                C32.{ 0.0,  0.2},
                C32.{ 9.0,  4.0}
            ]
        ]
    ];
    cvr : [8]C32 : C32.[
        C32.{ 8.0,  8.0},
        C32.{-7.0, -7.0},
        C32.{ 9.0,  9.0},
        C32.{ 5.0,  5.0},
        C32.{ 9.0,  9.0},
        C32.{ 8.0,  8.0},
        C32.{ 7.0,  7.0},
        C32.{ 7.0,  7.0},
    ];
    strue2 : [5]float32 : float32.[
        0.0, 0.5, 0.6, 0.7, 0.8
    ];
    strue4 : [5]float32 : float32.[
        0.0, 0.7, 1.0, 1.3, 1.6
    ];
    ctrue5 : [2][5][8]C32 : C32.[
        C32.[
            C32.[
                C32.{ 0.1,  0.1},
                C32.{ 1.0,  2.0},
                C32.{ 1.0,  2.0},
                C32.{ 1.0,  2.0},
                C32.{ 1.0,  2.0},
                C32.{ 1.0,  2.0},
                C32.{ 1.0,  2.0},
                C32.{ 1.0,  2.0}
            ],
            C32.[
                C32.{-0.16, -0.37},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00}
            ],
            C32.[
                C32.{-0.17, -0.19},
                C32.{ 0.13, -0.39},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00}
            ],
            C32.[
                C32.{ 0.11, -0.03},
                C32.{-0.17,  0.46},
                C32.{-0.17, -0.19},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00}
            ],
            C32.[
                C32.{ 0.19, -0.17},
                C32.{ 0.20, -0.35},
                C32.{ 0.35,  0.20},
                C32.{ 0.14,  0.08},
                C32.{ 2.00,  3.00},
                C32.{ 2.00,  3.00},
                C32.{ 2.00,  3.00},
                C32.{ 2.00,  3.00}
            ]
        ],
        C32.[
            C32.[
                C32.{ 0.1,  0.1},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0},
                C32.{ 4.0,  5.0}
            ],
            C32.[
                C32.{-0.16, -0.37},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00}
            ],
            C32.[
                C32.{-0.17, -0.19},
                C32.{ 8.00,  9.00},
                C32.{ 0.13, -0.39},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00}
            ],
            C32.[
                C32.{ 0.11, -0.03},
                C32.{ 3.00,  6.00},
                C32.{-0.17,  0.46},
                C32.{ 4.00,  7.00},
                C32.{-0.17, -0.19},
                C32.{ 7.00,  2.00},
                C32.{ 7.00,  2.00},
                C32.{ 7.00,  2.00}
            ],
            C32.[
                C32.{ 0.19, -0.17},
                C32.{ 5.00,  8.00},
                C32.{ 0.20, -0.35},
                C32.{ 6.00,  9.00},
                C32.{ 0.35,  0.20},
                C32.{ 8.00,  3.00},
                C32.{ 0.14,  0.08},
                C32.{ 9.00,  4.00}
            ]
        ]
    ];
    ctrue6 : [2][5][8]float32 : C32.[
        C32.[
            C32.[
                C32.{ 0.1, 0.1},
                C32.{ 1.0, 2.0},
                C32.{ 1.0, 2.0},
                C32.{ 1.0, 2.0},
                C32.{ 1.0, 2.0},
                C32.{ 1.0, 2.0},
                C32.{ 1.0, 2.0},
                C32.{ 1.0, 2.0}
            ],
            C32.[
                C32.{ 0.09, -0.12},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00},
                C32.{ 3.00,  4.00}
            ],
            C32.[
                C32.{ 0.03, -0.09},
                C32.{ 0.15, -0.03},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00},
                C32.{ 5.00,  6.00}
            ],
            C32.[
                C32.{ 0.03,  0.03},
                C32.{-0.18,  0.03},
                C32.{ 0.03, -0.09},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00},
                C32.{ 7.00,  8.00}
            ],
            C32.[
                C32.{ 0.09, 0.03},
                C32.{ 0.15, 0.00},
                C32.{ 0.00, 0.15},
                C32.{ 0.00, 0.06},
                C32.{ 2.00, 3.00},
                C32.{ 2.00, 3.00},
                C32.{ 2.00, 3.00},
                C32.{ 2.00, 3.00}
            ]
        ],
        C32.[
            C32.[
                C32.{ 0.1, 0.1},
                C32.{ 4.0, 5.0},
                C32.{ 4.0, 5.0},
                C32.{ 4.0, 5.0},
                C32.{ 4.0, 5.0},
                C32.{ 4.0, 5.0},
                C32.{ 4.0, 5.0},
                C32.{ 4.0, 5.0}
            ],
            C32.[
                C32.{ 0.09, -0.12},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00},
                C32.{ 6.00,  7.00}
            ],
            C32.[
                C32.{ 0.03, -0.09},
                C32.{ 8.00,  9.00},
                C32.{ 0.15, -0.03},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00},
                C32.{ 2.00,  5.00}
            ],
            C32.[
                C32.{ 0.03,  0.03},
                C32.{ 3.00,  6.00},
                C32.{-0.18,  0.03},
                C32.{ 4.00,  7.00},
                C32.{ 0.03, -0.09},
                C32.{ 7.00,  2.00},
                C32.{ 7.00,  2.00},
                C32.{ 7.00,  2.00}
            ],
            C32.[
                C32.{ 0.09,  0.03},
                C32.{ 5.00,  8.00},
                C32.{ 0.15,  0.00},
                C32.{ 6.00,  9.00},
                C32.{ 0.00,  0.15},
                C32.{ 8.00,  3.00},
                C32.{ 0.00,  0.06},
                C32.{ 9.00,  4.00}
            ]
        ],
    ];
    itrue3 : [5]int : int.[0,1,2,2,2];
    itruec : [5]int : int.[0,1,1,1,1];

    cx    : Array1D( 8, C32) = ---;
    cxr   : Array1D(15, C32) = ---;
    mwpcs : Array1D( 5, C32) = ---;
    mwpct : Array1D( 5, C32) = ---;

    // Executable Statements
    for incx:1..2 {
        for n:0..4 {
            len = 2*max(n,1);
            // Set vector arguments
            for 0..len-1 {
                set(*cx, it, cv[incx-1][n][it]);
            }
            if icase == {
            case 6;
                ctest1(scnrm2(n,cx,incx), strue2[n], strue2[n], sfac);
            case 7;
                ctest1(scasum(n,cx,incx), strue4[n], strue4[n], sfac);
            case 8;
                cscal(n,ca,*cx,incx);
                ctest(len, cx, ctrue5[incx-1][n][0], ctrue5[incx-1][n][0], sfac);
            case 9;
                csscal(n,sa,*cx,incx);
                ctest(len,cx,ctrue6[incx-1][n][0], ctrue6[incx-1][n][0], sfac);
            case 10;
                itest1(icamax(n,cx,incx),itrue3[n]);
                for i:0..len-1 {
                    set(cx,i, C32.{42.0, 43.0});
                }
                itest1(icamax(n,cx,incx), itrue[n]);
            } else {
                println("WARNING: Shouldn't be here in check1.");
                assert(false);
            }
        }
        if icase == 10 {
            n = 8;
            ix = 0;
            for i:0..n-1 {
                set(*cxr, ix, cvr[i]);
                ix += incx;
            }
            itest1(icamax(n,cxr,incx), 3);
        }
    }

    incx = 1;
    if icase == 8 {
        // Add a test for alpha equal to zero.
        ca = zero(C32);
        for i:0..5 {
            set(*mwpct, i, zero(C32));
            set(*mwpcs, i, C32.{1.0, 1.0});
        }
        cscal(5, ca, *cx, incx);
        ctest(5, cx, mwpct, mwpcs, sfac);
    } else if icase == 9 {
        // Add a test for alpha equal zero.
        sa = 0.0;
        for i:0..5 {
            set(*mwpct, i, zero(C32));
            set(*mwpcs, i, C32.{1.0, 1.0});
        }
        csscal(5, sa, *cx, incx);
        ctest(5, cx, mwpct, mwpcs, sfac);
        // add a test for alpha equal to one.
        sa = 1.0;
        for i:0..5 {
            set(*mwpct, i, get(cx,i));
            set(*mwpcs, i, get(cx,i));
        }
        csscal(5, sa, *cx, incx);
        ctest(5, cx, mwpct, mwpcs, sfac);
        // add a test for alpha equal to minus one.
        sa = -1.0;
        for i:0..5 {
            set(*mwpct, i, -get(cx,i));
            set(*mwpcs, i, -get(cx,i));
        }
        csscal(5, sa, *cx, incx);
        ctest(5, cx, mwpct, mwpcs, sfac);
    }
}

//  ######  ##     ## ########  ######  ##    ##  #######
// ##    ## ##     ## ##       ##    ## ##   ##  ##     ##
// ##       ##     ## ##       ##       ##  ##          ##
// ##       ######### ######   ##       #####     #######
// ##       ##     ## ##       ##       ##  ##   ##
// ##    ## ##     ## ##       ##    ## ##   ##  ##
//  ######  ##     ## ########  ######  ##    ## #########

check2 :: (sfac: float32) -> bool {
    ca : C32 : C32.{0.4, -0.7};
    incxs : [4]int : int.[1,2,-2,-1];
    incys : [4]int : int.[1,-2,1,-2];
    lens  : [2][4]int : int.[int.[1,1,2,4], int.[1,1,3,7]];
    ns    : [4]int : int.[0,1,2,4];

    cx1 : [7]C32 : C32.[
        C32.{ 0.7, -0.8},
        C32.{-0.4, -0.7},
        C32.{-0.1, -0.9},
        C32.{ 0.2, -0.8},
        C32.{-0.9, -0.4},
        C32.{ 0.1,  0.4},
        C32.{-0.6,  0.6}
    ];
    cy1 : [7]C32 : C32.[
        C32.{ 0.6, -0.6},
        C32.{-0.9,  0.5},
        C32.{ 0.7, -0.6},
        C32.{ 0.1, -0.5},
        C32.{-0.1, -0.2},
        C32.{-0.5, -0.3},
        C32.{ 0.8, -0.7}
    ];
    ct8 : [4][4][7]C32 : C32.[
        C32.[
            C32.[
                C32.{ 0.6, -0.6},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0}
            ],
            C32.[
                C32.{ 0.32, -1.41},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00}
            ],
            C32.[
                C32.{ 0.32, -1.41},
                C32.{-1.55,  0.50},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00}
            ],
            C32.[
                C32.{ 0.32, -1.41},
                C32.{-1.55,  0.50},
                C32.{ 0.03, -0.89},
                C32.{-0.38, -0.96},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00}
            ]
        ],
        C32.[
            C32.[
                C32.{ 0.6, -0.6},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0},
                C32.{ 0.0,  0.0}
            ],
            C32.[
                C32.{ 0.32, -1.41},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00}
            ],
            C32.[
                C32.{-0.07, -0.89},
                C32.{-0.90,  0.50},
                C32.{ 0.42, -1.41},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00},
                C32.{ 0.00,  0.00}
            ],
            C32.[
                C32.{ 0.78,  0.06},
                C32.{-0.90,  0.50},
                C32.{ 0.06, -0.13},
                C32.{ 0.10, -0.50},
                C32.{-0.77, -0.49},
                C32.{-0.50, -0.30},
                C32.{ 0.52, -1.51},
            ]
        ],
        C32.[
            C32.[
                C32.{0.6e0,-0.6e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ],
            C32.[
                C32.{0.32e0,-1.41e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ],
            C32.[
                C32.{-0.07e0,-0.89e0},
                C32.{-1.18e0,-0.31e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ],
            C32.[
                C32.{0.78e0,0.06e0},
                C32.{-1.54e0,0.97e0},
                C32.{0.03e0,-0.89e0},
                C32.{-0.18e0,-1.31e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ]
        ],
        C32.[
            C32.[
                C32.{0.6e0,-0.6e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ],
            C32.[
                C32.{0.32e0,-1.41e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ],
            C32.[
                C32.{0.32e0,-1.41e0},
                C32.{-0.9e0,0.5e0},
                C32.{0.05e0,-0.6e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0},
                C32.{0.0e0,0.0e0}
            ],
            C32.[
                C32.{0.32e0,-1.41e0},
                C32.{-0.9e0,0.5e0},
                C32.{0.05e0,-0.6e0},
                C32.{0.1e0,-0.5e0},
                C32.{-0.77e0,-0.49e0},
                C32.{-0.5e0,-0.3e0},
                C32.{0.32e0,-1.16e0}
            ]
        ]
    ];
}